{"version":3,"sources":["components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/MyPosts/MyPosts.module.css","components/profile/MyPosts/Post/Post.module.css","components/profile/MyPosts/Post/Post.jsx","components/profile/MyPosts/MyPosts.jsx","components/profile/MyPosts/MyPostsContainer.jsx","components/profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/profile/ProfileInfo/ProfileDataForm.jsx","components/profile/ProfileInfo/ProfileInfo.jsx","components/profile/profile.jsx","components/profile/profileContainer.jsx"],"names":["module","exports","Post","Props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","MyPostsFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postsElements","posts","reverse","map","p","id","postsBlock","values","addPost","newPostElement","MyPostsContainer","connect","state","profilePage","dispatch","newPostBody","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","ProfileDataReduxForm","profile","error","styles","formSummaryError","Input","type","Object","keys","contacts","key","ProfileData","isOwner","onClick","editModeTrue","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contactsItem","ProfileInfo","Preloader","discriptionBlock","imgBlock","photos","large","userPhoto","inputFile","target","files","length","selectedPhoto","formData","saveProfile","then","initialValues","Profile","content","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","isAuth","withRouter"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,SAAW,8BAA8B,OAAS,4BAA4B,UAAY,+BAA+B,aAAe,oC,0CCAnND,EAAOC,QAAU,CAAC,WAAa,8B,oBCA/BD,EAAOC,QAAU,CAAC,KAAO,qB,kNCeVC,EAZF,SAACC,GACZ,OACE,sBAAKC,UAAWC,IAAEC,KAAlB,UACE,qBAAKC,IAAI,uFACRJ,EAAMK,QACP,8BACE,yCAAYL,EAAMM,oBCFpBC,EAAcC,YAAiB,IAsC/BC,EAAmBC,YAAU,CAACC,KAAM,eAAjBD,EAfL,SAACE,GACnB,OACE,uBAAMC,SAAUD,EAAME,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAK,iBAC1BC,YAAY,qBACZC,SAAU,CAACC,IAAUd,OAE9B,8BACE,sDAQOe,EAtCC,SAACV,GAEf,IAAIW,EAAgB,YAAIX,EAAMY,OAAOC,UAAUC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMtB,QAASsB,EAAEtB,QACXC,WAAYqB,EAAErB,YACTqB,EAAEC,OAMrE,OACE,sBAAK3B,UAAWC,IAAE2B,WAAlB,UACE,wCACA,gCACE,cAACpB,EAAD,CAAkBI,SARP,SAACiB,GAChBlB,EAAMmB,QAAQD,EAAOE,mBAQhBT,S,QCLMU,EAFUC,aAZH,SAACC,GACrB,MAAO,CACLX,MAAOW,EAAMC,YAAYZ,UAIJ,SAACa,GACxB,MAAO,CACLN,QAAS,SAACO,GAAiBD,EAASE,YAAqBD,QAIpCJ,CAA6CZ,G,2CC6BvDkB,EA1CgB,SAAC5B,GAE9B,MAA8B6B,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAAS7B,EAAMgC,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAW,WAAQD,EAAUjC,EAAMgC,UAAU,CAAChC,EAAMgC,SAepD,OACE,iCAEKF,GACD,8BACA,sBAAMK,cAlBa,WACvBJ,GAAY,IAkBF1C,UAAWC,IAAE0C,OADnB,SAC6BhC,EAAMgC,QAAU,cAG7CF,GACA,8BACE,uBAAOM,WAAW,EACXC,OArBY,WACzBN,GAAY,GACZ/B,EAAMsC,aAAaN,IAoBNO,MAAOP,EACPQ,SAlBQ,SAACC,GACtBR,EAAUQ,EAAEC,cAAcH,gB,iBCiCfI,EAFc7C,YAAU,CAAEC,KAAM,gBAAlBD,EA9CL,SAAC,GAAsC,IAApCI,EAAmC,EAAnCA,aAAc0C,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChD,OACE,uBAAM5C,SAAUC,EAAhB,UACE,8BACE,4CAED2C,GAAS,qBAAKxD,UAAWyD,IAAOC,iBAAvB,SAA0CF,IACpD,gCACE,2CACA,cAAC1C,EAAA,EAAD,CAAOI,YAAa,YAClBD,KAAM,WACNF,UAAW4C,SAEf,gCACE,mDACA,cAAC7C,EAAA,EAAD,CAAO8C,KAAM,WACX3C,KAAM,iBACNF,UAAW4C,SAEf,gCACE,wDACA,cAAC7C,EAAA,EAAD,CAAOI,YAAa,yBAClBD,KAAM,4BACNF,UAAWC,SAEf,gCACE,0CACA,cAACF,EAAA,EAAD,CAAOI,YAAa,WAClBD,KAAM,UACNF,UAAWC,SAEf,gCACE,0CACC6C,OAAOC,KAAKP,EAAQQ,UAAUtC,KAAI,SAAAuC,GACjC,OAAO,8BACL,8BAAIA,EAAJ,MAAW,cAAClD,EAAA,EAAD,CAAOG,KAAM,YAAY+C,EAClB9C,YAAa8C,EACbjD,UAAW4C,MAF7B,QADeK,eCuBrBC,EAAc,SAACtD,GACnB,OACE,gCACE,8BACGA,EAAMuD,SAAW,wBAAQC,QAASxD,EAAMyD,aAAvB,oBAElB,gCACA,2CAAkBzD,EAAM4C,QAAQc,YAElC,gCACE,mDAA0B1D,EAAM4C,QAAQe,eAAiB,MAAQ,QAEnE,gCACE,wDAA+B3D,EAAM4C,QAAQgB,6BAE/C,gCACE,0CAAiB5D,EAAM4C,QAAQiB,WAEjC,gCACE,0CACGX,OAAOC,KAAKnD,EAAM4C,QAAQQ,UAAUtC,KAAI,SAAAuC,GAAG,OAAI,cAAC,EAAD,CAASS,aAAcT,EACdU,aAAc/D,EAAM4C,QAAQQ,SAASC,IAChCA,aAQlEW,EAAU,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC9B,OACE,sBAAK1E,UAAWC,IAAE2E,aAAlB,UACE,8BAAIH,EAAJ,OADF,IAC0BC,MAQfG,EA/FK,SAAClE,GAEnB,MAA8B6B,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KAEA,IAAK/B,EAAM4C,QACT,OAAO,cAACuB,EAAA,EAAD,IAgBT,OACE,8BACE,sBAAK9E,UAAWC,IAAE8E,iBAAlB,UACE,sBAAK/E,UAAWC,IAAE+E,SAAlB,UACE,qBAAK7E,IAAkC,MAA7BQ,EAAM4C,QAAQ0B,OAAOC,MAAevE,EAAM4C,QAAQ0B,OAAOC,MAAQC,MAC1ExE,EAAMuD,SACP,gCACA,uBAAON,KAAM,OACN5D,UAAWC,IAAEmF,UACbjC,SAtBW,SAACC,GACrBA,EAAEiC,OAAOC,MAAMC,QACjB5E,EAAM6E,cAAepC,EAAEiC,OAAOC,MAAM,OAqBhC,mDAIF,gCACA,6BAAK3E,EAAM4C,QAAQc,WACnB,wCACA,cAAC,EAAD,CAAwB1B,OAAQhC,EAAMgC,OAAQM,aAActC,EAAMsC,eACjER,EACC,cAAC,EAAD,CAAiBc,QAAS5C,EAAM4C,QACf3C,SA3BR,SAAC6E,GAChB9E,EAAM+E,YAAYD,GAAUE,MAC1B,WAAOjD,GAAY,OA0BEkD,cAAejF,EAAM4C,UACtC,cAAC,EAAD,CAAaA,QAAS5C,EAAM4C,QACfa,aAAc,kBAAM1B,GAAY,IAChCwB,QAASvD,EAAMuD,mBCnCvB2B,EAdC,SAAClF,GACf,OACE,sBAAKX,UAAWC,IAAE6F,QAAlB,UACE,cAAC,EAAD,CAAcvC,QAAS5C,EAAM4C,QACfW,QAASvD,EAAMuD,QACfwB,YAAa/E,EAAM+E,YACnB/C,OAAQhC,EAAMgC,OACdM,aAActC,EAAMsC,aACpBuC,cAAe7E,EAAM6E,gBACnC,cAAC,EAAD,Q,gBCLAO,E,oKAEJ,WACE,IAAIC,EAASC,KAAKtF,MAAMuF,MAAMC,OAAOH,OAChCA,IACHA,EAASC,KAAKtF,MAAMyF,mBAElBH,KAAKtF,MAAM0F,QAAQC,KAAK,UAG5BL,KAAKtF,MAAM4F,eAAeP,GAC1BC,KAAKtF,MAAM6F,UAAUR,K,+BAGvB,WACEC,KAAKQ,mB,gCAGP,SAAoBC,EAAWC,EAAWC,GACpCX,KAAKtF,MAAMuF,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QAC3DC,KAAKQ,mB,oBAIT,WACE,OACA,cAAC,EAAD,2BAAaR,KAAKtF,OAAlB,IACU4C,QAAS0C,KAAKtF,MAAM4C,QACpBmC,YAAaO,KAAKtF,MAAM+E,YACxBxB,SAAU+B,KAAKtF,MAAMuF,MAAMC,OAAOH,OAClCrD,OAAQsD,KAAKtF,MAAMgC,OACnB6C,cAAeS,KAAKtF,MAAM6E,cAC1BvC,aAAcgD,KAAKtF,MAAMsC,oB,GAhCR4D,IAAMC,WA+CtBC,sBACb9E,aAToB,SAACC,GAAD,MAAY,CAClCqB,QAASrB,EAAMC,YAAYoB,QAC3BZ,OAAQT,EAAMC,YAAYQ,OAC1ByD,iBAAkBlE,EAAM8E,KAAKhB,OAC7BiB,OAAQ/E,EAAM8E,KAAKC,UAKQ,CAACV,mBAAgBC,cAAWvD,iBAAcyC,gBAAaF,oBAChF0B,IAFaH,CAGXhB","file":"static/js/3.14e61390.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__19UeT\",\"imgBlock\":\"ProfileInfo_imgBlock__3o7CU\",\"status\":\"ProfileInfo_status__1MW7H\",\"inputFile\":\"ProfileInfo_inputFile__2MQa8\",\"contactsItem\":\"ProfileInfo_contactsItem__1HTP-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__6pkEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1RQmz\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (Props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://image.freepik.com/free-vector/hand-drawn-fuck-you-symbol_23-2148674548.jpg' />\r\n      {Props.message}\r\n      <div>\r\n        <span>like {Props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = (props) => {\r\n\r\n  let postsElements = [...props.posts].reverse().map(p => <Post message={p.message} \r\n                                                                likesCount={p.likesCount}\r\n                                                                key={p.id} />);\r\n\r\n  let addNewPost = (values) => {\r\n    props.addPost(values.newPostElement);\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>Posts:</h3>\r\n      <div>\r\n        <MyPostsFormRedux onSubmit={addNewPost}/>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst MyPostsForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name='newPostElement' \r\n               placeholder='Enter your message' \r\n               validate={[required, maxLength10]} />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm({form: 'addPostForm'})(MyPostsForm);\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport { addPostActionCreator } from './../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostBody) => {dispatch(addPostActionCreator(newPostBody))}\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect( () => { setStatus(props.status)}, [props.status] )\r\n  \r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n\r\n      { !editMode &&\r\n        <div>\r\n        <span onDoubleClick={activateEditMode}\r\n              className={s.status} >{props.status || \".......\"}</span>\r\n      </div>}\r\n\r\n      { editMode &&\r\n        <div>\r\n          <input autoFocus={true} \r\n                 onBlur={deactivateEditMode} \r\n                 value={status}\r\n                 onChange={onStatusChange} />\r\n        </div>}\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport styles from '../../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>Save</button>\r\n      </div>\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name:</b>\r\n        <Field placeholder={'Full name'}\r\n          name={'fullName'}\r\n          component={Input} />\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>\r\n        <Field type={'checkbox'}\r\n          name={'lookingForAJob'}\r\n          component={Input} />\r\n      </div>\r\n      <div>\r\n        <b>My professional skills:</b>\r\n        <Field placeholder={'My professional skills'}\r\n          name={'lookingForAJobDescription'}\r\n          component={Textarea} />\r\n      </div>\r\n      <div>\r\n        <b>About me:</b>\r\n        <Field placeholder={'About me'}\r\n          name={'aboutMe'}\r\n          component={Textarea} />\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b>\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return <div key={key}>\r\n            <b>{key} : <Field name={'contacts.'+key}\r\n                              placeholder={key}\r\n                              component={Input} /> </b>\r\n          </div>\r\n        })}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../assets/images/user.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n  \r\n  let [editMode, setEditMode] = useState(false)\r\n  \r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  \r\n  const onMainPhotoSelect = (e) => {\r\n    if (e.target.files.length) {\r\n      props.selectedPhoto( e.target.files[0] )\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    props.saveProfile(formData).then(\r\n      () => {setEditMode(false)}\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.discriptionBlock}>\r\n        <div className={s.imgBlock}>\r\n          <img src={props.profile.photos.large !=null ? props.profile.photos.large : userPhoto}/>\r\n          {props.isOwner && \r\n          <div>\r\n          <input type={\"file\"}\r\n                 className={s.inputFile}\r\n                 onChange={onMainPhotoSelect}/>\r\n          <p>Change photo</p>\r\n          </div>\r\n          }\r\n        </div>\r\n        <div>\r\n        <h1>{props.profile.fullName}</h1>\r\n        <b>Status:</b>\r\n        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n        {editMode \r\n        ? <ProfileDataForm profile={props.profile}\r\n                           onSubmit={onSubmit}\r\n                           initialValues={props.profile} /> \r\n        : <ProfileData profile={props.profile} \r\n                       editModeTrue={() => setEditMode(true)}\r\n                       isOwner={props.isOwner} />\r\n        }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nconst ProfileData = (props) => {\r\n  return(\r\n    <div>\r\n      <div>\r\n        {props.isOwner && <button onClick={props.editModeTrue}>Edit</button>}\r\n        </div>      \r\n        <div>\r\n        <b>Full name:</b>{props.profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>{props.profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills:</b>{props.profile.lookingForAJobDescription}\r\n      </div>\r\n      <div>\r\n        <b>About me:</b>{props.profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b>\r\n          {Object.keys(props.profile.contacts).map(key => <Contact contactTitle={key}\r\n                                                                   contactValue={props.profile.contacts[key]}\r\n                                                                   key={key}\r\n          />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n  return (\r\n    <div className={s.contactsItem}>\r\n      <b>{contactTitle}:</b> {contactValue}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div className={s.content}>\r\n      <ProfileInfo  profile={props.profile}\r\n                    isOwner={props.isOwner}\r\n                    saveProfile={props.saveProfile}\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                    selectedPhoto={props.selectedPhoto} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, saveProfile, selectedPhoto } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n  \r\n  refreshProfile () {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    };\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.refreshProfile()\r\n  };\r\n\r\n  componentDidUpdate (prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n  \r\n  render () {\r\n    return (\r\n    <Profile {...this.props} \r\n              profile={this.props.profile} \r\n              saveProfile={this.props.saveProfile}\r\n              isOwner={!this.props.match.params.userId}\r\n              status={this.props.status} \r\n              selectedPhoto={this.props.selectedPhoto}\r\n              updateStatus={this.props.updateStatus}/>\r\n    )\r\n  }\r\n};\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\nprofile: state.profilePage.profile,\r\nstatus: state.profilePage.status,\r\nauthorizedUserId: state.auth.userId,\r\nisAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, saveProfile, selectedPhoto }),\r\n  withRouter\r\n  )(ProfileContainer);"],"sourceRoot":""}